{"version":3,"sources":["components/Button.module.css","components/TileRow.module.css","App.module.css","components/AppTypes.tsx","components/Util.tsx","components/Button.tsx","components/AppActions.tsx","components/Tile.tsx","components/TileRow.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","components/AppStore.tsx","components/AppReducers.tsx","index.tsx","components/Game.module.css","components/Tile.module.css"],"names":["module","exports","ActionType","GameState","ButtonDirection","initialState","gameState","START","tiles","directionStyles","up","down","left","right","processTiles","direction","groups","indexOrder","RIGHT","LEFT","DOWN","UP","concatenated","forEach","item","concat","result","map","index","convertGroupToTiles","temp","slice","getGroupLines","tileLine","filter","i","length","unshift","processTileLine","getStyles","styles","button","onButtonPressed","updateTiles","emptyTilesIndices","newTiles","ONGOING","indexOf","isGameWon","GAMEWINNER","array1","array2","isTileValuesSame","isGameLost","GAMEOVER","emptyTiles","push","getEmptyTiles","Math","floor","random","connect","state","ownProps","appReducer","dispatch","type","UPDATE_TILES","payload","data-testid","className","style","backgroundImage","process","onClick","getTileClass","tileValue","tileFilled","tileEmpty","Tile","tile","TileRow","tileRow","value","getGameBoard","rowTiles","x","content","gameBoard","createInitialTile","tilePayload","TOTAL_ROWS","CREATE_TILE","restartGame","RESTART_GAME","useEffect","alert","game","controls","controls1","controls2","controls3","App","app","appHeader","appHeader_content","appHeader_title","appHeader_subtitle","appGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","action","rootReducer","combineReducers","ReactDOM","render","store","createStore","document","getElementById"],"mappings":"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","file":"static/js/main.5b2b3d7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__26hOZ\",\"buttonUp\":\"Button_buttonUp__1gMFS\",\"buttonRight\":\"Button_buttonRight__3Rr-J\",\"buttonDown\":\"Button_buttonDown__1XgOX\",\"buttonLeft\":\"Button_buttonLeft__2TLDC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tileRow\":\"TileRow_tileRow__1054p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1LfN0\",\"appHeader\":\"App_appHeader__2wloO\",\"appHeader_content\":\"App_appHeader_content__hrZOd\",\"appHeader_title\":\"App_appHeader_title__1uQM4\",\"appHeader_subtitle\":\"App_appHeader_subtitle__1jz9z\",\"appGame\":\"App_appGame__tCwYh\"};","export enum ActionType {\r\n  CREATE_TILE,\r\n  UPDATE_TILES,\r\n  RESTART_GAME\r\n}\r\n\r\nexport enum GameState {\r\n  START,\r\n  ONGOING,\r\n  GAMEOVER,\r\n  GAMEWINNER\r\n}\r\n\r\nexport enum ButtonDirection {\r\n  UP = \"up\",\r\n  DOWN = \"down\",\r\n  LEFT = \"left\",\r\n  RIGHT = \"right\"\r\n}\r\n\r\nexport interface TilePayload {\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nexport interface Action {\r\n  type: ActionType;\r\n  payload: any;\r\n}\r\n","import { ButtonDirection, GameState } from \"./AppTypes\";\r\n\r\nexport const initialState = {\r\n  gameState: GameState.START,\r\n  tiles: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n};\r\n\r\nexport const TOTAL_ROWS = 4;\r\nexport const TOTAL_TILES_PER_ROW = 4;\r\n\r\nexport const directionStyles = {\r\n  up: \"buttonUp\",\r\n  down: \"buttonDown\",\r\n  left: \"buttonLeft\",\r\n  right: \"buttonRight\"\r\n};\r\n\r\nexport const getRandomIndex = () => {\r\n  const totalTiles = TOTAL_ROWS * TOTAL_TILES_PER_ROW;\r\n  return Math.floor(Math.random() * totalTiles);\r\n};\r\n\r\nexport const processTileLine = (tileLine: Array<number>) => {\r\n  let temp = tileLine.filter((item) => item > 0);\r\n  //merge adjacent same values\r\n  for (let i = temp.length; i > 1; i--) {\r\n    if (temp[i - 1] == temp[i - 2]) {\r\n      temp[i - 1] = temp[i - 1] * 2;\r\n      temp[i - 2] = 0;\r\n    }\r\n  }\r\n  //cleanup\r\n  temp = temp.filter((item) => item > 0);\r\n  //fill with zeroes\r\n  while (temp.length < TOTAL_TILES_PER_ROW) {\r\n    temp.unshift(0);\r\n  }\r\n  return temp;\r\n};\r\n\r\nexport const getGroupLines = (\r\n  direction: ButtonDirection,\r\n  tiles: Array<number>\r\n): Array<Array<number>> => {\r\n  let indexOrder: Array<number> = [];\r\n  switch (direction) {\r\n    case ButtonDirection.RIGHT:\r\n      indexOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n      break;\r\n    case ButtonDirection.LEFT:\r\n      indexOrder = [3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12];\r\n      break;\r\n    case ButtonDirection.DOWN:\r\n      indexOrder = [0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15];\r\n      break;\r\n    case ButtonDirection.UP:\r\n      indexOrder = [12, 8, 4, 0, 13, 9, 5, 1, 14, 10, 6, 2, 15, 11, 7, 3];\r\n      break;\r\n  }\r\n  let temp: Array<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  temp = temp.map((item, index) => {\r\n    return tiles[indexOrder[index]];\r\n  });\r\n  const result = [\r\n    temp.slice(0, 4),\r\n    temp.slice(4, 8),\r\n    temp.slice(8, 12),\r\n    temp.slice(12, 16)\r\n  ];\r\n  return result;\r\n};\r\n\r\nexport const convertGroupToTiles = (\r\n  direction: ButtonDirection,\r\n  groups: Array<Array<number>>\r\n): Array<number> => {\r\n  let indexOrder: Array<number> = [];\r\n  switch (direction) {\r\n    case ButtonDirection.RIGHT:\r\n      indexOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n      break;\r\n    case ButtonDirection.LEFT:\r\n      indexOrder = [3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12];\r\n      break;\r\n    case ButtonDirection.DOWN:\r\n      indexOrder = [0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15];\r\n      break;\r\n    case ButtonDirection.UP:\r\n      indexOrder = [3, 7, 11, 15, 2, 6, 10, 14, 1, 5, 9, 13, 0, 4, 8, 12];\r\n      break;\r\n  }\r\n  let concatenated: Array<number> = [];\r\n  groups.forEach((item) => {\r\n    concatenated = concatenated.concat(item);\r\n  });\r\n  let result: Array<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  result = result.map((item, index) => {\r\n    return concatenated[indexOrder[index]];\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const processTiles = (\r\n  direction: ButtonDirection,\r\n  tiles: Array<number>\r\n): Array<number> => {\r\n  const groupedLines = getGroupLines(direction, tiles);\r\n  const processed = groupedLines.map((item) => {\r\n    return processTileLine(item);\r\n  });\r\n  const result = convertGroupToTiles(direction, processed);\r\n  return result;\r\n};\r\n\r\nexport const getEmptyTiles = (tiles: Array<number>): Array<number> => {\r\n  const result: Array<number> = [];\r\n  tiles.forEach((item, index) => {\r\n    if (item == 0) {\r\n      result.push(index);\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const chooseRandomIndex = (emptyTilesIndices: Array<number>): number => {\r\n  return emptyTilesIndices[\r\n    Math.floor(Math.random() * emptyTilesIndices.length)\r\n  ];\r\n};\r\n\r\nexport const isTileValuesSame = (\r\n  array1: Array<number>,\r\n  array2: Array<number>\r\n) => {\r\n  if (array1.length != array2.length) {\r\n    return false;\r\n  }\r\n  let result = true;\r\n  for (let i in array1) {\r\n    if (array1[i] != array2[i]) {\r\n      result = false;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const isGameWon = (tiles: Array<number>): boolean => {\r\n  return tiles.indexOf(2048) > 0;\r\n};\r\n\r\nexport const isGameLost = (tiles: Array<number>): boolean => {\r\n  return tiles.indexOf(0) < 0;\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\nimport { ButtonDirection, GameState } from \"./AppTypes\";\r\nimport {\r\n  directionStyles,\r\n  processTiles,\r\n  isTileValuesSame,\r\n  getEmptyTiles,\r\n  chooseRandomIndex,\r\n  isGameWon,\r\n  isGameLost\r\n} from \"./Util\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTiles } from \"./AppActions\";\r\n\r\nconst getStyles = (direction: ButtonDirection): string => {\r\n  const classNames = `${styles.button} ${styles[directionStyles[direction]]}`;\r\n  return classNames;\r\n};\r\n\r\nexport const onButtonPressed = (\r\n  direction: ButtonDirection,\r\n  tiles: Array<number>,\r\n  updateTiles: any\r\n) => {\r\n  const newTiles = processTiles(direction, tiles);\r\n\r\n  let gameState = GameState.ONGOING;\r\n  if (isGameWon(newTiles)) {\r\n    gameState = GameState.GAMEWINNER;\r\n  }\r\n\r\n  if (isTileValuesSame(tiles, newTiles)) {\r\n    if (isGameLost(newTiles)) {\r\n      gameState = GameState.GAMEOVER;\r\n    } else {\r\n      return;\r\n    }\r\n  } else {\r\n    const emptyTiles = getEmptyTiles(newTiles);\r\n    const additionalTileIndex = chooseRandomIndex(emptyTiles);\r\n    newTiles[additionalTileIndex] = 2;\r\n  }\r\n  updateTiles(newTiles, gameState);\r\n};\r\n\r\nexport const Button = (\r\n  { direction, tiles, updateTiles }: any = {\r\n    direction: ButtonDirection.UP,\r\n    tiles: [],\r\n    updateTiles: {}\r\n  }\r\n) => {\r\n  return (\r\n    <button\r\n      data-testid=\"button\"\r\n      className={getStyles(direction)}\r\n      style={{\r\n        backgroundImage: `url(\"${process.env.PUBLIC_URL}/bluetriangle-up.svg\")`\r\n      }}\r\n      onClick={() => onButtonPressed(direction, tiles, updateTiles)}\r\n    ></button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any, ownProps: any) => {\r\n  return {\r\n    direction: ownProps.direction,\r\n    tiles: state.appReducer.tiles\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    updateTiles: (tiles: Array<number>, gameState: GameState) => {\r\n      dispatch(updateTiles(tiles, gameState));\r\n    }\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);\r\n","import { ActionType, GameState, Action, TilePayload } from \"./AppTypes\";\r\nimport { initialState } from \"./Util\";\r\n\r\nexport const createTile = (tilePayload: TilePayload): Action => {\r\n  return {\r\n    type: ActionType.CREATE_TILE,\r\n    payload: tilePayload\r\n  };\r\n};\r\n\r\nexport const updateTiles = (\r\n  tiles: Array<number>,\r\n  gameState: GameState\r\n): Action => {\r\n  return {\r\n    type: ActionType.UPDATE_TILES,\r\n    payload: { tiles: tiles, gameState: gameState }\r\n  };\r\n};\r\n\r\nexport const restartGame = (): Action => {\r\n  return {\r\n    type: ActionType.RESTART_GAME,\r\n    payload: initialState\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Tile.module.css\";\r\n\r\nconst getTileClass = (tileValue: number) => {\r\n  return tileValue ? styles.tileFilled : styles.tileEmpty;\r\n};\r\n\r\nconst Tile = ({ tileValue = 0 }) => {\r\n  return (\r\n    <div\r\n      data-testid=\"tile\"\r\n      className={`${styles.tile} ${getTileClass(tileValue)}`}\r\n    >\r\n      <div>{tileValue ? tileValue : \"\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { getTileClass };\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport styles from \"./TileRow.module.css\";\r\nimport Tile from \"./Tile\";\r\n\r\ninterface TileRowProps {\r\n  tiles: Array<number>;\r\n}\r\n\r\nconst TileRow = ({ tiles }: TileRowProps) => {\r\n  return (\r\n    <div data-testid=\"tile-row\" className={styles.tileRow}>\r\n      {tiles.map((value, index) => {\r\n        return <Tile key={index} tileValue={value} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileRow;\r\n","import React, { useEffect } from \"react\";\r\nimport styles from \"./Game.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"./Button\";\r\nimport { ButtonDirection, GameState } from \"./AppTypes\";\r\nimport { TOTAL_ROWS, TOTAL_TILES_PER_ROW } from \"./Util\";\r\nimport TileRow from \"./TileRow\";\r\nimport { createTile, restartGame } from \"./AppActions\";\r\nimport { getRandomIndex } from \"./Util\";\r\n\r\nconst getGameBoard = (tiles: Array<number>) => {\r\n  const rowTiles = [];\r\n  for (let i = 0; i < TOTAL_ROWS; i++) {\r\n    let x = tiles.slice(\r\n      i * TOTAL_TILES_PER_ROW,\r\n      i * TOTAL_TILES_PER_ROW + TOTAL_TILES_PER_ROW\r\n    );\r\n    rowTiles.push(x);\r\n  }\r\n\r\n  const content = rowTiles.map((item, index) => {\r\n    return <TileRow key={index} tiles={item} />;\r\n  });\r\n\r\n  return (\r\n    <div data-testid=\"game-board\" className={styles.gameBoard}>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Game = ({\r\n  tiles,\r\n  gameState,\r\n  createInitialTile,\r\n  restartGame\r\n}: any) => {\r\n  useEffect(() => {\r\n    if (gameState == GameState.GAMEWINNER) {\r\n      alert(\"Congratulations! You won!\");\r\n      restartGame();\r\n    } else if (gameState == GameState.GAMEOVER) {\r\n      alert(\"Game Over\");\r\n      restartGame();\r\n    } else if (gameState == GameState.START) {\r\n      createInitialTile();\r\n    }\r\n  }, [gameState]);\r\n\r\n  return (\r\n    <>\r\n      <div data-testid=\"game\" className={styles.game}>\r\n        {getGameBoard(tiles)}\r\n        <div data-testid=\"controls\" className={styles.controls}>\r\n          <div className={styles.controls1}>\r\n            <Button direction={ButtonDirection.LEFT} />\r\n          </div>\r\n          <div className={styles.controls2}>\r\n            <Button direction={ButtonDirection.UP} />\r\n            <Button direction={ButtonDirection.DOWN} />\r\n          </div>\r\n          <div className={styles.controls3}>\r\n            <Button direction={ButtonDirection.RIGHT} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    tiles: state.appReducer.tiles,\r\n    gameState: state.appReducer.gameState\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    createInitialTile: () => {\r\n      const index = getRandomIndex();\r\n      dispatch(createTile({ index: index, value: 2 }));\r\n    },\r\n    restartGame: () => {\r\n      dispatch(restartGame());\r\n    }\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <header className={styles.appHeader}>\n        <div className={styles.appHeader_content}>\n          <div className={styles.appHeader_title}>2048</div>\n          <div className={styles.appHeader_subtitle}>\n            A React implementation of the game\n          </div>\n        </div>\n      </header>\n      <section className={styles.appGame}>\n        <Game />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers } from \"redux\";\r\nimport { appReducer } from \"./AppReducers\";\r\n\r\nconst reducers = {\r\n  appReducer: appReducer\r\n};\r\nconst rootReducer = combineReducers(reducers);\r\nexport const configureStore = () => createStore(rootReducer);\r\n","import { ActionType, GameState } from \"./AppTypes\";\r\nimport { initialState } from \"./Util\";\r\n\r\nexport const appReducer = (state = initialState, action: any) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case ActionType.CREATE_TILE:\r\n      const temp = state.tiles.map((item, index) => {\r\n        if (index !== payload.index) {\r\n          return item;\r\n        }\r\n        return payload.value;\r\n      });\r\n      return {\r\n        ...state,\r\n        tiles: temp,\r\n        gameState: GameState.ONGOING\r\n      };\r\n    case ActionType.UPDATE_TILES:\r\n      return {\r\n        ...state,\r\n        tiles: payload.tiles,\r\n        gameState: payload.gameState\r\n      };\r\n    case ActionType.RESTART_GAME:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./components/AppStore\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__2S5Oi\",\"gameBoard\":\"Game_gameBoard__3PJ4q\",\"controls\":\"Game_controls__1yyqx\",\"controls1\":\"Game_controls1__3JQ_T\",\"controls3\":\"Game_controls3__3f3Bq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"Tile_tile__1IGhI\",\"tileEmpty\":\"Tile_tileEmpty__2vi-3\",\"tileFilled\":\"Tile_tileFilled__Qn41-\"};"],"sourceRoot":""}